{"version":3,"file":"createMarkup-DP2Tw2iL.js","sources":["../../src/js/randomCharactersId.ts","../../src/js/api.ts","../../src/js/createMarkup.ts"],"sourcesContent":["const charactersId = [\n  1017100, 1009144, 1009146, 1010354, 1010755, 1009740, 1011758, 1009165,\n  1009596, 1011778, 1011793, 1011346, 1010782, 1011907, 1011809, 1017109,\n  1011119, 1010366, 1011276, 1009220, 1017575, 1017105, 1009225, 1010754,\n  1012065, 1010676, 1009262, 1010890, 1011071, 1017102, 1009297, 1017110,\n  1009299, 1009539, 1010980, 1011299, 1009619, 1011490, 1017108, 1009351,\n  1017098, 1017107, 1016839, 1009368, 1017104, 1009538, 1011876, 1011105,\n  1011319, 1009735, 1009708, 1010993, 1009677, 1013727, 1017577, 1017078,\n  1016837, 1010779, 1016840, 1017099, 1010744, 1010747, 1010790, 1011230,\n  1009581, 1009568, 1009571, 1010345, 1009573, 1010975, 1010974, 1011406,\n  1009577, 1009578, 1010712, 1009579, 1009580, 1017111, 1009583, 1009582,\n  1010858, 1009587, 1009588, 1009589, 1009590, 1009591, 1010976, 1009592,\n  1010864, 1009594, 1011223, 1017101, 1009598, 1011157, 1011057, 1010761,\n  1010874, 1009603, 1009606, 1010855, 1010693, 1010833, 1011032, 1009157,\n  1009609, 1012200, 1011114, 1016181, 1009610, 1011010, 1009608, 1010794,\n  1009614, 1011158, 1010899, 1009616, 1010860, 1010733, 1009621, 1011084,\n  1010828, 1011159, 1009625, 1009627, 1009628, 1009629, 1010979, 1010978,\n  1011062, 1011051, 1009632, 1010791, 1011212, 1009636, 1010981, 1009638,\n  1011022, 1009639, 1011232, 1011160, 1010695, 1011075, 1011017, 1009641,\n  1009643, 1011161, 1009648, 1011162, 1011034, 1009652, 1017103, 1011181,\n  1009662, 1010983, 1009664, 1017576, 1017106, 1011025, 1010820, 1009666,\n  1009667, 1010360, 1011304, 1009669, 1009670, 1011345, 1010669, 1009673,\n  1009675, 1011309, 1009676, 1010822, 1010825, 1010335, 1011047, 1010369,\n  1009681, 1009682, 1009683, 1010358, 1016825, 1011311, 1009685, 1010862,\n  1010696, 1010984, 1009687, 1010987, 1010986, 1010350, 1011182, 1011316,\n  1009690, 1010872, 1009691, 1009663, 1010788, 1011128, 1011106, 1010353,\n  1009695, 1009697, 1011011, 1009699, 1010990, 1011267, 1010991, 1011287,\n  1009705, 1009706, 1009707, 1010992, 1010765, 1011588, 1010348, 1016838,\n  1009714, 1009715, 1010994, 1009633, 1011009, 1011043, 1009717, 1010995,\n  1009718, 1011006, 1009719, 1009720, 1009722, 1009725, 1009726, 1010875,\n  1009734, 1009737, 1010996, 1011163, 1011515, 1009741, 1009742\n];\n\nlet randomArrIdx: Array<number> = []\n\nfunction randomCharactersId() {\n    for (let i = 0; i < 5; i++) {\n        const random = Math.round(Math.random() * charactersId.length)\n        randomArrIdx.push(random)\n    }\n    const newArr = randomArrIdx.map(idx => charactersId[idx])\n    return newArr\n}\n\nfunction randomComicsId(length: number) {\n  let randomComicsIdx: number[] = []\n\n  if (!length) {\n    return randomComicsIdx\n  } \n\n  const comicsCount = Math.min(3, length);\n\n    while (randomComicsIdx.length < comicsCount) {\n      const random = Math.floor(Math.random() * length);\n\n      if (!randomComicsIdx.includes(random)) {\n        randomComicsIdx.push(random);\n      }\n    }\n  return randomComicsIdx\n}\n\nexport {randomCharactersId, randomComicsId}","import md5 from \"md5\";\nimport { randomCharactersId, randomComicsId } from \"./randomCharactersId\";\nimport { IfilterObj, IDetailCharacters, IResult } from './interface'\n\nconst ts = '1'\nconst publickKey = '3e4a92df9169701b297c3638807c7b2e'\nconst privateKey = 'c93b62455441ec9a036d868875eb8644bb02aa07'\nconst hash = md5(ts + privateKey + publickKey)\nconst BASE_URL = 'https://gateway.marvel.com/v1/public'\n\nasync function fetchFiveRandomCharacters() {\n    const characterIds = randomCharactersId();\n\n    const arrayOfPromises = characterIds.map(async characterId => {\n        const response = await fetch(`${BASE_URL}/characters/${characterId}?ts=${ts}&apikey=${publickKey}&hash=${hash}`);\n        return response.json();\n    });\n\n    const characters = await Promise.all(arrayOfPromises);\n    const randomCharacters = characters.flatMap(({ data: { results } }) => results);\n    return randomCharacters\n};\n\nasync function fetchFilteredCharacters(obj: IfilterObj, offset:number, limit:number) {\n    const {comics, name, orderBy, date} = obj\n    const params = new URLSearchParams;\n\n    if (comics) params.append('comics', comics);\n    if (name) params.append('nameStartsWith', name);\n    if (orderBy) params.append('orderBy', orderBy);\n    if (date) params.append('modifiedSince', date);\n\n    const response = await fetch(`${BASE_URL}/characters?${params}&limit=${limit}&offset=${offset}&ts=${ts}&apikey=${publickKey}&hash=${hash}`);\n    return response.json();\n}\n\nasync function fetchCharactersById(url: string) {\n    const arrUrl = url.split('/');\n    const characterId = arrUrl[arrUrl.length - 1];\n    \n    const response = await fetch(`${BASE_URL}/characters/${characterId}?ts=${ts}&apikey=${publickKey}&hash=${hash}`)\n        .then(resp => {\n            if (!resp.ok) {\n                throw new Error(\"Error\");\n            }\n            return resp.json()\n        })\n        .then(async ({ data: {results} }) => {\n            const randomIdx = randomComicsId(results[0].comics.items.length)\n            const randomComics = await fetchRandomComics(randomIdx, results)\n            const charactersObj: IDetailCharacters = {\n                name: results[0].name,\n                description: results[0].description,\n                modified: results[0].modified,\n                thumbnail: results[0].thumbnail,\n                randomComics: randomComics\n            }\n            return charactersObj\n        })\n        .catch(err => console.log(err))\n    return response as IDetailCharacters\n}\n\nasync function fetchRandomComics(randomIdx: number[], results: IResult[]) {\n    const randomComicsUrl = randomIdx.map(idx => results[0].comics.items[idx])\n\n    const arrayOfPromises = randomComicsUrl.map(async obj => {\n        const arrUrl = obj.resourceURI.split('/');\n        const comicsId = arrUrl[arrUrl.length - 1];\n        \n        const response = await fetch(`${BASE_URL}/comics/${comicsId}?ts=${ts}&apikey=${publickKey}&hash=${hash}`);\n        return response.json();\n    });\n\n    const comics = await Promise.all(arrayOfPromises);\n    const randomComics = comics.flatMap(({ data: { results } }) => {\n        return {thumbnail: results[0].thumbnail, title: results[0].title}\n    });\n\n    return randomComics\n}\n\nexport {fetchFiveRandomCharacters, fetchFilteredCharacters, fetchCharactersById}","import {ICharacters, IDetailCharacters} from './interface'\n\nfunction createMarkupForSwiperWrapper(arr: ICharacters[]): string {\n    return arr.map(({name, thumbnail:{extension,path}}: ICharacters) => {\n        return `\n        <div class=\"swiper-slide\"><img src=\"${path}.${extension}\" alt=\"${name}\" class='random-characters__img'></div>\n        `\n    }).join('')\n}\n\nconst str: string = 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque vero praesentium doloremque quos voluptatem voluptates ipsa recusandae fugit officia. Sequi, cupiditate ut. Error placeat reprehenderit laudantium quibusdam voluptates,laboriosam ipsum!'\n\nfunction createMarkupForRandomCharacters(arr: ICharacters[]): string {\n    return arr.map(({ name, description, resourceURI }: ICharacters) => {\n        return `<li class=\"random-characters__item\" data-url='${resourceURI}'>\n        <p class='random-characters__name'>${name}</p>        \n        <p class=\"random-characters__description\">${!description.trim().length || description.includes('&nbsp;') ? str : description}</p>\n        </li>`\n    }).join('')\n}\n\nfunction createMarkupForMainCharactersList(arr: ICharacters[]): string {\n    return arr.map(({ name, resourceURI, thumbnail: { extension, path } }) => {\n        return `\n            <li class=\"characters__item\" data-url='${resourceURI}'>\n                <img src=\"${path}.${extension}\" alt=\"${name}\" class=\"characters__img\" />\n                <p class=\"characters__name\">${name}</p>\n            </li>\n        `;\n    }).join('');\n}\n\nfunction createMarkupForModalCharacters(data: IDetailCharacters): string {\n    const { name, description, modified, thumbnail: { path, extension }, randomComics } = data\n\n    const date = new Date(modified)\n    const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n    const formattedDate = date.toLocaleDateString('en-US', options);\n\n    const markup = randomComics.map(({thumbnail: {path, extension}, title}) => {\n        return `<li class='characters-modal__item'>\n                <img src=\"${path}.${extension}\" alt=\"${title}\" class='characters-modal__comics-img'>\n                <p class='characters-modal__comics-title'>${title}</p>\n            </li>`    \n        }).join('')\n    return `\n    <div class='characters-modal__container'>\n        <img src=\"${path}.${extension}\" alt=\"${name}\" class='characters-modal__img'>\n    <div class='characters-modal--bg'>\n    <div class='characters-modal__box'>\n        <div class='characters-modal__wrapper'> \n        <p class='characters-modal__name'>${name}</p>\n        <p class='characters-modal__modified'>${formattedDate}</p>\n        </div>\n        <p class='characters-modal__description'>${!description.trim().length || description.includes('&nbsp;') ? str : description}</p>\n    </div>\n    <div>\n        <p class='characters-modal__title'>List of comics</p>\n        <ul class='characters-modal__list'>\n            ${markup}\n        </ul>\n    </div>\n    </div>\n    </div>    \n    `\n}\n\n\nexport {createMarkupForRandomCharacters, createMarkupForSwiperWrapper, createMarkupForMainCharactersList, createMarkupForModalCharacters}"],"names":["charactersId","randomArrIdx","randomCharactersId","i","random","idx","randomComicsId","length","randomComicsIdx","comicsCount","ts","publickKey","privateKey","hash","md5","BASE_URL","fetchFiveRandomCharacters","arrayOfPromises","characterId","results","fetchFilteredCharacters","obj","offset","limit","comics","name","orderBy","date","params","fetchCharactersById","url","arrUrl","resp","randomIdx","randomComics","fetchRandomComics","err","comicsId","createMarkupForSwiperWrapper","arr","extension","path","str","createMarkupForRandomCharacters","description","resourceURI","createMarkupForMainCharactersList","createMarkupForModalCharacters","data","modified","options","formattedDate","markup","title"],"mappings":"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"}