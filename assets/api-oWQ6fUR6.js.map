{"version":3,"file":"api-oWQ6fUR6.js","sources":["../../src/js/randomCharactersId.ts","../../src/js/api.ts"],"sourcesContent":["const charactersId = [\n  1017100, 1009144, 1009146, 1010354, 1010755, 1009740, 1011758, 1009165,\n  1009596, 1011778, 1011793, 1011346, 1010782, 1011907, 1011809, 1017109,\n  1011119, 1010366, 1011276, 1009220, 1017575, 1017105, 1009225, 1010754,\n  1012065, 1010676, 1009262, 1010890, 1011071, 1017102, 1009297, 1017110,\n  1009299, 1009539, 1010980, 1011299, 1009619, 1011490, 1017108, 1009351,\n  1017098, 1017107, 1016839, 1009368, 1017104, 1009538, 1011876, 1011105,\n  1011319, 1009735, 1009708, 1010993, 1009677, 1013727, 1017577, 1017078,\n  1016837, 1010779, 1016840, 1017099, 1010744, 1010747, 1010790, 1011230,\n  1009581, 1009568, 1009571, 1010345, 1009573, 1010975, 1010974, 1011406,\n  1009577, 1009578, 1010712, 1009579, 1009580, 1017111, 1009583, 1009582,\n  1010858, 1009587, 1009588, 1009589, 1009590, 1009591, 1010976, 1009592,\n  1010864, 1009594, 1011223, 1017101, 1009598, 1011157, 1011057, 1010761,\n  1010874, 1009603, 1009606, 1010855, 1010693, 1010833, 1011032, 1009157,\n  1009609, 1012200, 1011114, 1016181, 1009610, 1011010, 1009608, 1010794,\n  1009614, 1011158, 1010899, 1009616, 1010860, 1010733, 1009621, 1011084,\n  1010828, 1011159, 1009625, 1009627, 1009628, 1009629, 1010979, 1010978,\n  1011062, 1011051, 1009632, 1010791, 1011212, 1009636, 1010981, 1009638,\n  1011022, 1009639, 1011232, 1011160, 1010695, 1011075, 1011017, 1009641,\n  1009643, 1011161, 1009648, 1011162, 1011034, 1009652, 1017103, 1011181,\n  1009662, 1010983, 1009664, 1017576, 1017106, 1011025, 1010820, 1009666,\n  1009667, 1010360, 1011304, 1009669, 1009670, 1011345, 1010669, 1009673,\n  1009675, 1011309, 1009676, 1010822, 1010825, 1010335, 1011047, 1010369,\n  1009681, 1009682, 1009683, 1010358, 1016825, 1011311, 1009685, 1010862,\n  1010696, 1010984, 1009687, 1010987, 1010986, 1010350, 1011182, 1011316,\n  1009690, 1010872, 1009691, 1009663, 1010788, 1011128, 1011106, 1010353,\n  1009695, 1009697, 1011011, 1009699, 1010990, 1011267, 1010991, 1011287,\n  1009705, 1009706, 1009707, 1010992, 1010765, 1011588, 1010348, 1016838,\n  1009714, 1009715, 1010994, 1009633, 1011009, 1011043, 1009717, 1010995,\n  1009718, 1011006, 1009719, 1009720, 1009722, 1009725, 1009726, 1010875,\n  1009734, 1009737, 1010996, 1011163, 1011515, 1009741, 1009742\n];\n\nlet randomArrIdx: Array<number> = []\n\nfunction randomCharactersId() {\n    for (let i = 0; i < 5; i++) {\n        const random = Math.round(Math.random() * charactersId.length)\n        randomArrIdx.push(random)\n    }\n    const newArr = randomArrIdx.map(idx => charactersId[idx])\n    return newArr\n}\n\nexport {randomCharactersId}","import md5 from \"md5\";\nimport { randomCharactersId } from \"./randomCharactersId\";\n\nconst ts = '1'\nconst publickKey = '3e4a92df9169701b297c3638807c7b2e'\nconst privateKey = 'c93b62455441ec9a036d868875eb8644bb02aa07'\nconst hash = md5(ts + privateKey + publickKey)\nconst BASE_URL = 'https://gateway.marvel.com/v1/public'\n\nconst fetchFiveRandomCharacters = async () => {\n    const characterIds = randomCharactersId();\n\n    const arrayOfPromises = characterIds.map(async characterId => {\n        const response = await fetch(`${BASE_URL}/characters/${characterId}?ts=${ts}&apikey=${publickKey}&hash=${hash}`);\n        return response.json();\n    });\n\n    const characters = await Promise.all(arrayOfPromises);\n    const randomCharacters = characters.flatMap(({ data: { results } }) => results);\n    return randomCharacters\n};\n\nasync function fetchAllCharacters(offset:number, limit:number) {\n    const response = await fetch(`${BASE_URL}/characters?limit=${limit}&offset=${offset}&ts=${ts}&apikey=${publickKey}&hash=${hash}`);\n    return response.json();\n}\n\nexport {fetchFiveRandomCharacters, fetchAllCharacters}"],"names":["charactersId","randomArrIdx","randomCharactersId","i","random","idx","ts","publickKey","privateKey","hash","md5","BASE_URL","fetchFiveRandomCharacters","arrayOfPromises","characterId","results","fetchAllCharacters","offset","limit"],"mappings":"+uBAAA,MAAMA,EAAe,CACnxD,EAEA,IAAIC,EAA8B,CAAA,EAElC,SAASC,GAAqB,CAC1B,QAASC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMC,EAAS,KAAK,MAAM,KAAK,SAAWJ,EAAa,MAAM,EAC7DC,EAAa,KAAKG,CAAM,CAC5B,CAEO,OADQH,EAAa,IAAWI,GAAAL,EAAaK,CAAG,CAAC,CAE5D,CCvCA,MAAMC,EAAK,IACLC,EAAa,mCACbC,EAAa,2CACbC,EAAOC,EAAIJ,EAAKE,EAAaD,CAAU,EACvCI,EAAW,uCAEXC,EAA4B,SAAY,CAG1C,MAAMC,EAFeX,IAEgB,IAAI,MAAMY,IAC1B,MAAM,MAAM,GAAGH,CAAQ,eAAeG,CAAW,OAAOR,CAAE,WAAWC,CAAU,SAASE,CAAI,EAAE,GAC/F,MACnB,EAIM,OAFY,MAAM,QAAQ,IAAII,CAAe,GAChB,QAAQ,CAAC,CAAE,KAAM,CAAE,QAAAE,CAAA,KAAgBA,CAAO,CAElF,EAEA,eAAeC,EAAmBC,EAAeC,EAAc,CAE3D,OADiB,MAAM,MAAM,GAAGP,CAAQ,qBAAqBO,CAAK,WAAWD,CAAM,OAAOX,CAAE,WAAWC,CAAU,SAASE,CAAI,EAAE,GAChH,MACpB"}